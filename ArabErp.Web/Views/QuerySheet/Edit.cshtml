@model ArabErp.Domain.QuerySheet

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script> 

    $(document).ready(function () {

          //---------------------toastr---------------------------//
        toastr.options = {
            "positionClass": "toast-bottom-full-width",
            "timeOut": "5000",
            "extendedTimeOut": "2000"
        }
        if ('@TempData["success"]' != '') {
            toastr.success('@TempData["success"]');
        }
        else if ('@TempData["error"]' != '') {
            toastr.error('@TempData["error"]'.split('|')[0]);
            console.log('@TempData["error"]'.split('|')[1]);
        }
    @{ TempData["success"] = TempData["error"] = ""; }
        //------------------------------------------------------//
        $(".numbers-only").keypress(function (e) {
            if (e.which == 8 || (e.which == 45 && $(this).val().indexOf('-') == -1) || (e.which == 46 && $(this).val().indexOf('.') == -1) || (e.which > 47 && e.which < 58)) {
            }
            else {
                return false;
            }
        });
        OnCostingAmountChanged();
    })

    function AddRow() {

        var i = 0;
        var no = 1;
        $('input[id^="Row_"]').each(function () {
            var id = this.id;
            no++;
            var row = Number(id.replace("Row_", ""));
            if (row > i) {
                i = row;
            }
        });
        i++;

        var index = (new Date()).getTime(); // unique indexer
        var clone = $('#0').clone(); // clone the BatchProducts item
        //Update the index of the clone
       
        clone.html($(clone).html().replace(/\QuerySheetItems_0__/g, 'QuerySheetItems_' + i + '__'));
        clone.html($(clone).html().replace(/\QuerySheetItems[0]./g, 'QuerySheetItems[' + i + '].'));
        clone.html($(clone).html().replace(/\[0\]/g, '[' + i + ']'));
        clone.html($(clone).html().replace(/\(0\)/g, '(' + i + ')'));
        clone.html($(clone).html().replace(/Row_0/, 'Row_' + i));
        clone.html($(clone).html().replace(/slno1/, 'slno' + (i + 1) + ''));
        clone.html($(clone).html().replace(/this,0/, 'this,' + i + ''));
        $("#tab_logic").append('<tr id="' + i + '">' + clone.html() + '  </tr>');
        $("#slno" + (i + 1)).html((i + 1));
  
        //bind keypress event for new row inputs.
        $(".numbers-only").keypress(function (e) {
            if (e.which == 8 || (e.which == 45 && $(this).val().indexOf('-') == -1) || (e.which == 46 && $(this).val().indexOf('.') == -1) || (e.which > 47 && e.which < 58)) {
            }
            else {
                return false;
            }
        });
        $('textarea[id^="QuerySheetItems_'+i+'__"], input[id^="QuerySheetItems_'+i+'__"]').val('');
    }

    function Delete(index) {

        var i = 0;
        var no = 1;
        $('input[id^="Row_"]').each(function () {
            var id = this.id;
            no++;
            var row = Number(id.replace("Row_", ""));
            if (row > i) {
                i = row;
            }
        });
        i++;
   
        if (i > 1) {
            $("#" + index).remove();
            for (var j = index + 1; j < i; j++) {
               
                var clone = $("#" + j).clone(true, true);
                clone.html($(clone).html().replace(new RegExp("QuerySheetItems_" + j + "__", "g"), 'QuerySheetItems_' + (j - 1) + '__'));
                clone.html($(clone).html().replace(new RegExp("\\[" + j + "].", "g"), "[" + (j - 1) + "]."));
                clone.html($(clone).html().replace(new RegExp('slno' + (j + 1) + '">' + (j + 1), "g"), 'slno' + (j) + '">' + (j)));
                clone.html($(clone).html().replace("Delete(" + j, "Delete(" + (j - 1)));
                clone.html($(clone).html().replace("Row_" + j, "Row_" + (j - 1)));
                clone.html($(clone).html().replace("this," + j, "this," + (j - 1)));
                $("#" + j).html(clone.html());
                $("#QuerySheetItems_" + (j - 1) + "__SlNo").val(j);
                $("#" + (j)).attr('id', (j - 1));
            }
        }
    }

    function Back(type) {

        var url = '@Url.Action("Index")';
        url += "?Type=" + type;
        window.location = url;
    }

    function DeleteQuerySheet(id) {
        //alert(id);
        var url = '@Url.Action("Delete")';
        url += "/" + id;

        window.location = url;
    }


    $(function ()
    {
        $("#QuerySheetDate").datepicker({ dateFormat: "dd-MM-yy" });
    });
    function OnCostingAmountChanged() {
        var amount = 0;
        $("input[id$='__Amount']").each(function (index, object) {
            if (!isNaN($(object).val()))
                amount += Number($(object).val());
        })
        $("#costingTotal").text(amount.toFixed(2));
    }
</script>


<div class="row">

    <div class="form-head1">
        <h4> Query Sheet</h4>
    </div>
    <div class="main-part pad1">

        @using (Html.BeginForm(null, null, FormMethod.Post))
        {
            @Html.HiddenFor(m => m.QuerySheetId)

            <div class="row form-group">

                    <div class="col-md-2">
                        <label for="QuerySheetRefNo">Query Sheet Ref No.</label>
                        @Html.TextBoxFor(m => m.QuerySheetRefNo, new { @class = "form_input", autocomplete = "off", @readonly = "readonly" })
                    </div>
                    <div class="col-md-2">
                        <label for="QuerySheetDate">Date</label>
                        @Html.TextBoxFor(m => m.QuerySheetDate, Model.QuerySheetDate.ToString("dd/MMMM/yyyy"), new { @class = "form_input ", autocomplete = "off", @readonly = "readonly" })
                    </div>

            </div>

            <hr />


            <div class="row form-group">

                <div class="col-md-3">
                    <label for="ProjectName">Project Name</label>
                    @Html.TextBoxFor(m => m.ProjectName, new { @class = "form_input", autocomplete = "off" })
                </div>

                <div class="col-md-3">
                     <label for="ContactPerson">Contact Person</label>
                     @Html.TextBoxFor(m => m.ContactPerson, new { @class = "form_input", autocomplete = "off" })
                </div>

                <div class="col-md-3">
                    <label for="ContactNumber">Contact Number</label>
                    @Html.TextBoxFor(m => m.ContactNumber, new { @class = "form_input", autocomplete = "off" })
                </div>

                <div class="col-md-3">
                    <label for="Email">Email</label>
                     @Html.TextBoxFor(m => m.Email, new { @class = "form_input", autocomplete = "off" })
                  </div>
            </div>
    <div class="row form-group">

    </div>

    <div class="table-responsive scroll2 ">
        <table class="table table-bordered" id="tab_logic" @*style="overflow-x:scroll;margin-bottom:0px"*@>
            <thead>
                <tr class="grid_heading">
                    <th width="1%" class="text-center"></th>
                    <th width="2%" class="text-center"><h1>#</h1></th>
                    <th width="10%" nowrap><h1>Room Details</h1></th>
                    <th width="5%" nowrap><h1>External Room Dimension</h1></th>
                    <th width="5%" nowrap><h1>Cold Room Area</h1></th>
                    <th width="5%" nowrap><h1>Cold Room Location</h1></th>
                    <th width="5%"><h1>Temperature</h1></th>
                    <th width="5%" nowrap><h1>Panel Thickness</h1></th>
                    <th width="6%" nowrap><h1>Floor Details</h1></th>
                    <th width="10%" nowrap><h1>Product Details</h1></th>
                    <th width="5%" nowrap><h1>Product Incoming Temperature</h1></th>
                    <th width="5%" nowrap><h1>Pipe Length</h1></th>
                    <th width="5%" nowrap><h1>Door Size</h1></th>
                    @if (Model.Type != "RoomDetails")
                    {

                        <th width="5%"><h1>Refrigerant</h1></th>
                        <th width="5%" nowrap><h1>Electrical Power</h1></th>
                        <th width="5%"><h1>Kilowatt</h1></th>
                        <th width="10%"><h1>Unit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h1></th>
                        <th width="5%"><h1>Cost</h1></th>
                    }
                    <th width="1%" class="text-center"></th>

                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.QuerySheetItems.Count; i++)
                {
                    <tr id="@i">
                        <td style="vertical-align:middle"><a class="glyphicon glyphicon-minus del" style="top:0px" onclick="Delete(@i)"></a></td>
                        <td align="center">
                            <input type="hidden" id="Row_@i" />
                            <span id="slno@(i + 1)">@(i + 1)</span>
                            @Html.HiddenFor(m => Model.QuerySheetItems[i].QuerySheetItemId)
                        </td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].RoomDetails, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].ExternalRoomDimension, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].ColdRoomArea, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].ColdRoomLocation, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].TemperatureRequired, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].PanelThicknessANDSpec, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].FloorDetails, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].ProductDetails, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].ProductIncomingTemperature, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].PipeLength, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].DoorSizeTypeAndNumberOfDoor, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                        @if (Model.Type != "RoomDetails")
                        {
                            <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].Refrigerant, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                            <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].EletricalPowerAvailability, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                            <td>@Html.TextAreaFor(m => Model.QuerySheetItems[i].Kilowatt, new { @class = "form_input form_input-h", autocomplete = "off" })</td>
                            <td>@Html.DropDownListFor(m => m.QuerySheetItems[i].Unit, new SelectList(ViewBag.UnitList, "Value", "Text", Model.QuerySheetItems[i].Unit), new { @class = "form_input" })</td>
                            <td>@Html.TextBoxFor(m => Model.QuerySheetItems[i].Cost, new { @class = "form_input numbers-only", autocomplete = "off" })</td>
                        }

                        <td style="vertical-align:middle"><a id="add_row" class="glyphicon glyphicon-plus del" style="top:0px" onclick="AddRow()"></a></td>
                    </tr>
                }

            </tbody>

        </table>
    </div>
    <br />
            if (@Model.Type == "Costing")
            {
                @Html.Partial("_ProjectCosting", Model)
            }


            <div class="row">
                <div class="col-md-12 hrpart">
                    <input type="button" class="form-button right" value="Exit" onclick="Back('@Model.Type')" />
                    @if (Model.isUsed)
                    {
                        <em class="perm">**Cannot delete/update because the query sheet is already used somewhere.</em>
                    }
                    else
                    {
                        @*<button type="submit" class="form-button right">Update</button>
                        <button type="button" class="form-button left" onclick="DeleteQuerySheet('@Model.QuerySheetId')">Delete</button>*@ 
                    }
                </div>
            </div>
        }
    </div>
</div>

