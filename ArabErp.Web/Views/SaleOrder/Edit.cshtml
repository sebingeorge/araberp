@model  ArabErp.Domain.SaleOrder
@{ ViewBag.Title = "Edit SaleOrder"; Layout = "~/Views/Shared/_Layout.cshtml"; }
@{ string actionName = ViewContext.RouteData.GetRequiredString("action");
 if (actionName == "CreateProject")
 {
     actionName = "Create";
 }
}

<script>


    $(function () {
        $("#SaleOrderDate").datepicker({ dateFormat: "dd-MM-yy" });
        $("#EDateArrival").datepicker({ dateFormat: "dd-MM-yy" });
        $("#EDateDelivery").datepicker({ dateFormat: "dd-MM-yy" });

    });
    function CustomerChanged(cust) {
        var cusId = cust.value;

        $.ajax({
            url: "@Url.Action("GetCustomerDetailsByKey", "SaleOrder")",
            data: { cusKey: cusId },
            cache: false,
            type: "GET",
            timeout: 10000,
            dataType: "json",
            success: function (result) {
                if (result.Success) { // this sets the value from the response
                    $('#CurrencyId').val(result.CurrencyId);
                    $('#CurrencyName').val(result.CurrencyName);
                    $("#CustomerAddress").val(result.Address);

                } else {
                    $('#SomeOtherHtmlTextBox').val("Failed");
                }
            }
        });


    }

    function QuotationChanged(quot) {
        var quoId = quot.value;

        $.ajax({

            url: "@Url.Action("GetQuationDetailsByKey","SaleOrder")",
            data: { quoKey: quoId },
            cache: false,
            type: "GET",
            timeout: 10000,
            dataType: "json",
            success: function (result) {
                if (result.Success) { // this sets the value from the response
                    $('#CustomerId').val(result.CustomerId);
                    $('#CurrencyName').val(result.CurrencyName);
                    $("#CustomerAddress").val(result.Address);
                    $("#PaymentTerms").val(result.PaymentTerms);
                    $("#SpecialRemarks").val(result.SpecialRemarks);
                    var currid = result.CurrencyId

                    LoadWorkDescriptions(quoId, currid)
                    $('#CurrencyId').val(result.CurrencyId);

                } else {
                    $('#SomeOtherHtmlTextBox').val("Failed");
                }
            }
        });
    }
    function LoadWorkDescriptions(quoId, currid) {

        var isProjectBased = $("#isProjectBased").val();
        var url = '@Url.Action("RefreshDisplaySOList")';
        url = url + "?quoId=" + quoId + "&isProjectBased=" + isProjectBased + "&currid=" + currid;
        $("#wordescriptions").load(url);

    }
    function Validation() {
        var count = 0;
        if ($("#CommissionAgentId").val() != '' && (Number($("#CommissionAmount").val()) == '' || Number($("#CommissionAmount").val()) <= 0)) {
            toastr.info("Sales Executive incentive amount is required");
            return false;
        }
        return true;

    

        $(".validateqty").each(function (i, obj) {

            var qty = $("#Items_" + i + "__Quantity").val();
            var rate = $("#Items_" + i + "__Rate").val();
            var wrk = $("#Items_" + i + "__WorkDescriptionId").val();
            var unit = $("#Items_" + i + "__UnitId").val();
            var discount = $("#Items_" + i + "__Discount").val();
            var amount = $("#Items_" + i + "__Amount").val();
            if (wrk == "") {

                alert("select work description");
                $("#Items_" + i + "__WorkDescriptionId").focus();
                count = 1;
            }
            else if (qty == "") {

                alert("please enter qty.");
                $("#Items_" + i + "__Quantity").focus();
                count = 1;
            }
            else if (unit == "") {

                alert("select unit.");
                $("#Items_" + i + "__UnitId").focus();
                count = 1;
            }
            else if (rate == "") {

                alert("please enter rate");
                $("#Items_" + i + "__Rate").focus();
                count = 1;
            }

            else if (eval(discount) > eval(amount)) {
                alert("please enter valid discount.");
                $("#Items_" + i + "__Discount").focus();
                count = 1;
            }



        });


        if (count == 1) {

            return false;
        }

        var orderDate = new Date($("#SaleOrderDate").val());
        var arrivalDate = new Date($("#EDateArrival").val());
        var deliveryDate = new Date($("#EDateDelivery").val());

        if (orderDate >= arrivalDate){
            toastr.info("Sale Order date should be less than the date of arrival.")
            return false;
        }
        else if (arrivalDate >= deliveryDate) {
            toastr.info("Date of arrival should be less than the date of delivery.")
            return false;
        }
        return true;



    }
    $(document).ready(function () {
        $("#CustomerOrderRef").focus();
        //bind keypress event for new row inputs.
        $(".numbers-only").keypress(function (e) {
            if (e.which == 8 || (e.which == 46 && $(this).val().indexOf('.') == -1) || (e.which > 47 && e.which < 58)) { } else { return false; }
        });
        toastr.options = {
            "closeButton": true,
            "positionClass": "toast-bottom-full-width",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "0",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }
        if ('@TempData["success"]' != '') {
            toastr.success('@TempData["success"]');
        }
        else if ('@TempData["error"]' != '') {
            toastr.error('@TempData["error"]'.split('|')[0]);
            console.log('@TempData["error"]'.split('|')[1]);
        }
        @{ TempData["success"] = TempData["error"] = ""; }
    });

    function Exit() {

        location.href = '@Url.Action("Index", new { type = Request.QueryString["type"] })';
      
    }

    function DeleteItem(id) {
        var url = '@Url.Action("Delete", new { id = Model.SaleOrderId, type = Model.isProjectBased })';
        window.location=url;
    }
</script>
@Html.HiddenFor(m => m.SaleOrderId)

<div class="row">
    <div class="form-head1">
        <h4>Sale Order Confirmation</h4>
    </div>

    <div class="main-part pad1">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "createFrom", @id = "saleorder_form", onsubmit = "return Validation()" }))
        {
            @Html.HiddenFor(m => m.SalesQuotationId)
            @Html.HiddenFor(m => m.SaleOrderId)
            @Html.HiddenFor(m => m.isProjectBased)
            @Html.Partial("_SaleOrderHead", Model)
            <div id="wordescriptions">
                @Html.Partial("_DisplaySOList", Model)
            </div>
            if (@Model.isProjectBased != 0)
            {
                @Html.Partial("_MaterialList", Model)
            }
            @Html.Partial("_SaleOrderFooter", Model)
            <div class="row">
                <div class="col-md-12 hrpart">
                    <button type="button" class="form-button right" onclick="Exit()">Exit</button>
                    <button type="submit" class="form-button right">Edit</button>
                    <input type="button" value="Delete" onclick="DeleteItem(@Model.SaleOrderId)" class="form-button left" />
                </div>
            </div>
        }
    </div>
</div>






