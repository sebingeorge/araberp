@model ArabErp.Domain.StockCreation

@{
    ViewBag.Title = "Create Stock";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!----------------------------------------------->
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.0/themes/base/jquery-ui.css">
<link rel="stylesheet" href="/resources/demos/style.css">
<style>
    .custom-combobox {
        position: relative;
        /*display: inline-block;*/
    }

    .custom-combobox-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
    }

    .custom-combobox-input {
        margin: 0;
        padding: 5px 10px;
    }
</style>
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.0/jquery-ui.js"></script>
<script>
    $(function () {
        $.widget("custom.combobox", {
            _create: function () {
                this.wrapper = $("<span>")
                  .addClass("custom-combobox")
                  .insertAfter(this.element);

                this.element.hide();
                this._createAutocomplete();
                this._createShowAllButton();
            },

            _createAutocomplete: function () {
                var selected = this.element.children(":selected"),
                  value = selected.val() ? selected.text() : "";

                this.input = $("<input >")
                  .appendTo(this.wrapper)
                  .val(value)
                  .attr("title", "")
                  .addClass("form_input custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                  .autocomplete({
                      delay: 0,
                      minLength: 0,
                      source: $.proxy(this, "_source")
                  })
                  .tooltip({
                      classes: {
                          "ui-tooltip": "ui-state-highlight"
                      }
                  });

                this._on(this.input, {
                    autocompleteselect: function (event, ui) {
                        ui.item.option.selected = true;
                        this._trigger("select", event, {
                            item: ui.item.option
                        });
                        this.element.trigger("change");
                    },
                    autocompletechange: "_removeIfInvalid"
                });
            },

            _createShowAllButton: function () {
                var input = this.input,
                  wasOpen = false;

                $("<a>")
                  .attr("tabIndex", -1)
                  .attr("title", "Show All Items")
                  .tooltip()
                  .appendTo(this.wrapper)
                  .button({
                      icons: {
                          primary: "ui-icon-triangle-1-s"
                      },
                      text: false
                  })
                  .removeClass("ui-corner-all")
                  .addClass("custom-combobox-toggle ui-corner-right")
                  .on("mousedown", function () {
                      wasOpen = input.autocomplete("widget").is(":visible");
                  })
                  .on("click", function () {
                      input.trigger("focus");

                      // Close if already visible
                      if (wasOpen) {
                          return;
                      }

                      // Pass empty string as value to search for, displaying all results
                      input.autocomplete("search", "");
                  });
            },

            _source: function (request, response) {
                var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                response(this.element.children("option").map(function () {
                    var text = $(this).text();
                    if (this.value && (!request.term || matcher.test(text)))
                        return {
                            label: text,
                            value: text,
                            option: this
                        };
                }));
            },

            _removeIfInvalid: function (event, ui) {

                // Selected an item, nothing to do
                if (ui.item) {
                    return;
                }

                // Search for a match (case-insensitive)
                var value = this.input.val(),
                  valueLowerCase = value.toLowerCase(),
                  valid = false;
                this.element.children("option").each(function () {
                    if ($(this).text().toLowerCase() === valueLowerCase) {
                        this.selected = valid = true;
                        return false;
                    }
                });

                // Found a match, nothing to do
                if (valid) {
                    return;
                }

                // Remove invalid value
                this.input
                  .val("")
                  .attr("title", value + " didn't match any item");
                  //.tooltip("open");
                this.element.val("");
                this.element.trigger("change");
                this._delay(function () {
                    this.input.tooltip("close").attr("title", "");
                }, 2500);
                this.input.autocomplete("instance").term = "";
            },

            _destroy: function () {
                this.wrapper.remove();
                this.element.show();
            }
        });

        $("select[id$='__ItemId']").combobox();
        //$("#combobox").combobox();
        //$("#toggle").on("click", function () {
        //    $("#combobox").toggle();
        //});
    });
</script>
<!----------------------------------------------->
<script type="text/javascript">

    $(document).ready(function () {
        //$("#ConsumedStockpointId").combobox();
        $("#StockCreationRefNo").tooltip();

        //---------------------toastr---------------------------//
        toastr.options = {
            "positionClass": "toast-bottom-full-width",
            "timeOut": "5000",
            "extendedTimeOut": "2000"
        }
        if ('@TempData["success"]' != '') {
            toastr.success('@TempData["success"]');
        }
        else if ('@TempData["error"]' != '') {
            toastr.error('@TempData["error"]'.split('|')[0]);
            console.log('@TempData["error"]'.split('|')[1]);
        }
        @{ TempData["success"] = TempData["error"] = ""; }
        //------------------------------------------------------//

        $("#StockCreationDate").datepicker({
            dateFormat: "dd-MM-yy"
        });

        //bind keypress event
        $(".numbers-only").keypress(function (e) {
            if (e.which == 8 || (e.which == 45 && $(this).val().indexOf('-') == -1) || (e.which == 46 && $(this).val().indexOf('.') == -1) || (e.which > 47 && e.which < 58)) { }
            else { return false; }
        });

    })

    function formValidation() {
        var status = true;
        $("input[id$='__StockQuantity']").each(function (index, object) {
            if ($(object).val() <= 0) {
                toastr.info("Consumed items should be in stock");
                status = false;
                return false;
            }
            else if (Number($(object).val()) < Number($("#ConsumedItems_" + index + "__Quantity").val())) {
                toastr.info("Consumed quantity cannot be greater than stock quantity");
                status = false;
                return false;
            }
        })
        return status;
    }

    function Previous() {
        var url = '@Url.Action("PreviousList")';
        window.location = url;
    }

    function OnConsumedItemStockPointChanged() {
        $("#consumed-table").addClass("fade");
        $("input[id$='__StockQuantity']").each(function (index, object) {
            if ($("#ConsumedStockpointId").val() == '') {
                $(object).val(0);
            }
            else OnMaterialChanged(index);
        })
        $("#consumed-table").removeClass("fade");
    }

    function Exit() {
        var url = '@Url.Action("Index", "Home")';
        window.location = url;
    }

</script>


<div class="row">
    <div class="form-head1">
        <h4>Stock Creation</h4>
    </div>

    <div class="main-part pad1">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "createFrom", @id = "stock-creation-form", @onsubmit = "return formValidation()" }))
        {
            <div class="row form-group">
                <div class="col-md-12">
                    <em id="expiry-notification"></em>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-md-2">
                    <label for="StockCreationRefNo">Reference No.</label>
                    @Html.TextBoxFor(m => m.StockCreationRefNo, new { @class = "form_input", @readonly = "true", @title = "This number may change after saving" })
                </div>
                <div class="col-md-2">
                    <label for="StockCreationDate">Date</label>
                    @Html.TextBoxFor(m => m.StockCreationDate, Model.StockCreationDate.ToString("dd-MMMM-yyyy"), new { @class = "form_input", @readonly = "true", @required = "true", @onchange = "OnConsumedItemStockPointChanged()" })
                </div>
                <div class="col-md-3">
                    <label for="FinishedGoodStockpointId">Destination</label>
                    @Html.DropDownListFor(m => m.FinishedStockpointId, (SelectList)ViewBag.stockpointList, "Select Stockpoint", new { @class = "form_input" })
                </div>
                <div class="col-md-3">
                    <label for="ConsumedItemStockpointId">Source</label>
                    @Html.DropDownListFor(m => m.ConsumedStockpointId, (SelectList)ViewBag.stockpointList, "Select Stockpoint", new { @class = "form_input", @onchange = "OnConsumedItemStockPointChanged()" })
                </div>
            </div>

            <strong>Finished Goods:</strong>
            <div class="table-responsive scroll4" id="finished-table">
                @Html.Action("FinishedGoodsGrid")
            </div>

            <strong>Consumed Items:</strong>
            <div class="table-responsive scroll4" id="consumed-table">
                @Html.Action("ConsumedItemsGrid")
            </div>

            <div class="row">
                <div class="col-md-12 hrpart">
                    <input type="button" class="form-button" value="Previous" onclick="Previous()" title="Previously created stocks" />
                    <input type="button" class="form-button right" value="Exit" onclick="Exit()" title="Go to home page" />
                    <input type="submit" class="form-button right" value="Save" />
                </div>
            </div>
        }
    </div>
</div>

