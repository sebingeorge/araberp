@model ArabErp.Domain.JobCardCompletion
@{
    ViewBag.Title = "Job Card Completion";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    int isProjectBased = Model.isProjectBased ?? 0;
    //int isProjectBased = Convert.ToInt32(Request.QueryString["isProjectBased"].ToString());
}
<script>

    $(function () {

        //if (ViewBag.type = 0)
        //{
        $("#JobCardCompletedDate").datepicker({ dateFormat: "dd-MM-yy" });
        $("#WarrentyPeriod").datepicker({ dateFormat: "dd-MM-yy" });
        $("#TaskDate").datepicker({ dateFormat: "dd-MM-yy" });
        assignTaskDate();
        $(".glyphicon-plus").hide();
        //}
        //else
        //{
        //    $("#JobCardCompletedDate").datepicker({ dateFormat: "dd-MM-yy" });
        //    $("#WarrentyPeriod").datepicker({ dateFormat: "dd-MM-yy" });
        //    $("#TaskDate").datepicker({ dateFormat: "dd-MM-yy" });
        //    assignTaskDate();
        //    $(".glyphicon-plus").show();
        //}
    });
    function assignTaskDate() {
        $('.taskdate').each(function (i, obj) {
            //console.log(obj.id);
            $("#" + obj.id).removeClass("hasDatepicker");
            $("#" + obj.id).datepicker({ dateFormat: "dd/MM/yy" });
        });
    }
    function AddRowBelow(rNo) {
        var i = 0;
        var no = 0;
        $('.TaskRow').each(function (j, obj) {
            var row = Number(obj.id.replace("Row_", ""));
            i = j;
        });
        i++;
        //$('input[id^="Row_"]').each(function () {
        //    var id = this.id;
        //    console.log(id);
        //    //no++;
        //    //var row = Number(id.replace("Row_", ""));
        //    //if(row>i)
        //    //{
        //    //    i = row;
        //    //}
        //});
        //i++;
        console.log(i);

        var clone = $('#Row_0').clone();
        clone.html($(clone).html().replace(/\JobCardTask_0__/g, 'JobCardTask_' + i + '__'));
        clone.html($(clone).html().replace(/\JobCardTask_0__/g, 'JobCardTask_' + i + '__'));
        clone.html($(clone).html().replace(/\JobCardTask[0]./g, 'JobCardTask[' + i + '].'));
        clone.html($(clone).html().replace(/\[0\]/g, '[' + i + ']'));
        clone.html($(clone).html().replace(/\(0\)/g, '(' + i + ')'));
        clone.html($(clone).html().replace(/\Row_0/g, 'Row_' + i + ''));
        //clone.html($(clone).html().replace(/Row_/, 'Row_' + i + ''));

        var template = clone.html();
        template.replace(/\JobCardTask_1__Existing/g, "JobCardTask_2__Existing")
        console.log(template);

        $("#tab_logic").append('<tr id="Row_' + i + '" class="TaskRow">' + template + '  </tr>');
        $('#Row_' + i).find('.taskdate').datepicker({ dateFormat: "dd-MM-yy" });
        assignTaskDate();
        ResetExisting(rNo, i);
    }
    function ResetExisting(oldRow, newRow) {
        $("#JobCardTask_" + newRow + "__Existing").val(1);
    }

    function Exit() {
        var url = '@Url.Action("Index", new { isProjectBased = Model.isProjectBased })';
        window.location = url;
    }
</script>


<div class="row">

    <div class="form-head1">
        <h4>Job Card Completion</h4>
    </div>
    <div class="main-part pad1">
        @using (Html.BeginForm("Save", null, FormMethod.Post, new { @class = "createFrom", @id = "saleorder_form" }))
        {
            @Html.HiddenFor(m => m.isProjectBased)
            @Html.HiddenFor(m => m.StoreIssued)
            <div class="row form-group">
                <div class="col-md-2">
                    <label for="jcno">Job Card No.</label>
                    @Html.TextBoxFor(m => m.JobCardNo, new { @class = "form_input", autocomplete = "off", @readonly = "true" })
                    @Html.HiddenFor(m => m.JobCardId)
                </div>
                <div class="col-md-2">
                    <label for="inputDate">Date</label>
                    @Html.TextBoxFor(m => m.JobCardCompletedDate, Model.JobCardCompletedDate.ToString("dd/MMMM/yyyy"), new { @class = "form_input", autocomplete = "off" })
                </div>
            </div>
            <div class="row form-group">
                <div class="col-md-4">
                    <label for="cus">Customer</label>
                    @Html.TextBoxFor(m => m.CustomerName, new { @class = "form_input", @readonly = "true" })
                </div>
                @if (isProjectBased == 0)
                {
                    <div class="col-md-3">
                        <label for="vehmodel">Vehicle Model</label>
                        @Html.TextBoxFor(m => m.VehicleModelName, new { @class = "form_input", @readonly = "true" })
                    </div>
                }
            </div>
            <div class="row form-group">
                <div class="col-md-12">
                    <label for="work">Work Description</label>
                    @Html.TextAreaFor(m => m.WorkDescr, new { @class = "form_input form_input-h1", @readonly = "true" })
                </div>
            </div>
            <div class="row form-group">
                <div class="col-md-2">
                    <label for="WarrentyPeriod">Warranty Period</label>
                    @Html.TextBoxFor(m => m.WarrentyPeriod, Model.WarrentyPeriod.ToString("dd/MMMM/yyyy"), new { @class = "form_input", autocomplete = "off", @readonly = "true" })
                </div>
            </div>
            <div class=" table-responsive">

                <table class="table table-bordered" id="tab_logic">
                    <thead>
                        <tr class="grid_heading">
                            <th width="2%"><h1>#</h1></th>
                            <th width="35%"><h1>Task</h1></th>
                            <th width="30%"><h1>Technician</h1></th>
                            <th width="10%"><h1>Date</h1></th>
                            @*<th width="10%"><h1>Start Time</h1></th>
                                <th width="10%"><h1>End Time</h1></th>*@
                            <th width="10%"><h1>Estimated Hrs.</h1></th>
                            <th width="10%"><h1>Actual Hrs.</h1></th>
                            @*<th width="2%"><h1></h1></th>*@
                        </tr>
                    </thead>
                    <tbody class="grid_row">
                        @{ int row = 0;}
                        @foreach (var item in Model.JobCardTask)
                        {
                            <tr id="Row_@row" class="TaskRow">
                                <td align="center">
                                    @Html.HiddenFor(m => m.JobCardTask[row].Existing)
                                    @Html.HiddenFor(m => m.JobCardTask[row].SlNo)
                                    @(row + 1)
                                </td>
                                <td>
                                    @*@Html.DropDownListFor(m => Model.JobCardTask[row].EmployeeId, new  (SelectList)ViewBag.EmployeeList, "Value", "Text", Model.JobCardTask[row].EmployeeId, new { @class = "form_input", autocomplete = "off" })*@
                                    @*@Html.DropDownListFor(x => Model.JobCardTask[row].EmployeeId, new SelectList(ViewBag.EmployeeList, "Value", "Text", Model.JobCardTask[row].EmployeeId), "select work description", new { @class = "form_input", autocomplete = "off" })*@
                                    @Html.TextBoxFor(m => m.JobCardTask[row].JobCardTaskName, new { @class = "form_input", @readonly = "true" })
                                </td>
                                <td>
                                    @*@Html.DropDownListFor(m => Model.JobCardTask[row].JobCardTaskMasterId, new  (SelectList)ViewBag.TaskList, "Value", "Text", Model.JobCardTask[row].JobCardTaskMasterId, new { @class = "form_input", autocomplete = "off" })*@
                                    @*@Html.DropDownListFor(x => Model.JobCardTask[row].JobCardTaskMasterId, new SelectList(ViewBag.TaskList, "Value", "Text", Model.JobCardTask[row].JobCardTaskMasterId), "select work description", new { @class = "form_input", autocomplete = "off" })*@
                                    @Html.TextBoxFor(m => m.JobCardTask[row].EmployeeName, new { @class = "form_input", @readonly = "true" })
                                </td>
                                @if (row == 0)
                                {
                                    <td rowspan="@Model.JobCardTask.Count" align="center">

                                        @if (Model.JobCardTask[row].StartDate.ToString("dd/MMMM/yyyy").Equals("01-January-0001"))
                                        {
                                            @: <span class="perm">No daily activity found</span>
                                        }
                                        else
                                        {
                                            @Html.HiddenFor(m => m.JobCardTask[row].StartDate)
                                            @Html.HiddenFor(m => m.JobCardTask[row].EndDate)
                                            if (Model.JobCardTask[row].StartDate.ToString("dd/MMMM/yyyy") == Model.JobCardTask[row].EndDate.ToString("dd/MMMM/yyyy"))
                                            {
                                                @Model.JobCardTask[row].StartDate.ToString("dd/MMMM/yyyy")
                                            }
                                            else
                                            {
                                                @Model.JobCardTask[row].StartDate.ToString("dd/MMMM/yyyy") <br />@:to<br /> @Model.JobCardTask[row].EndDate.ToString("dd/MMMM/yyyy")
                                            }
                                        }
                                    </td>
                                }
                                @*<td>
                                        @Html.TextBoxFor(m => m.JobCardTask[row].StartTime, new { @class = "form_input", autocomplete = "off" })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.JobCardTask[row].EndTime, new { @class = "form_input", autocomplete = "off" })
                                    </td>*@
                                <td>
                                    @Html.TextBoxFor(m => m.JobCardTask[row].Hours, new { @class = "form_input", autocomplete = "off", @readonly = "true" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.JobCardTask[row].ActualHours, new { @class = "form_input", autocomplete = "off", @readonly = "true" })
                                </td>
                                <!--<td style="vertical-align:middle;">
                                    <a class="glyphicon glyphicon-plus" id="add_@row" style="top:0;" @*type="button" value="Add"*@ onclick="AddRowBelow(@row);"></a>
                                </td>-->
                            </tr>
                                row++;
                        }
                    </tbody>
                </table>
            </div>
            <div class="row form-group">
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="part1">
                                <label for="SplRemarks1">Special Remarks</label>
                                @Html.TextAreaFor(m => m.SpecialRemarks, new { @class = "form_input form_input-h", autocomplete = "off" })
                            </div>
                        </div>
                    </div>
                </div>

            </div>



            <div class="row">

                <div class="col-md-12 hrpart">


                    @if (Model.StoreIssued == false)
                    {
                        <span class="perm">
                            <em>**Store Issue is not done for this Job Card</em>
                        </span>
                        <button type="button" class="form-button right" onclick="Exit()">Exit</button>
                    }
                    else
                    {
                        <button type="button" class="form-button right" onclick="Exit()">Exit</button>
                        <button type="submit" class="form-button right">Save</button>
                        <span class="right" style="padding-top: 3px;margin-right: 20px;">On Hold</span>
                        @Html.CheckBoxFor(m => m.isOnHold, new { @class = "right CheckBoxClass" })
                    }

                </div>

            </div>

        }
    </div>
</div>
